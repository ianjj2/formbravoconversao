# ====================================
# SCRIPT PARA COMMIT NO GITHUB
# Formul√°rio Convers√£o Digital - BRAVO BET
# ====================================

Write-Host "üöÄ Iniciando processo de commit para GitHub..." -ForegroundColor Green
Write-Host ""

# Verificar se Git est√° instalado
try {
    $gitVersion = git --version 2>$null
    Write-Host "‚úÖ Git encontrado: $gitVersion" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Git n√£o est√° instalado!" -ForegroundColor Red
    Write-Host "Por favor, instale o Git primeiro:" -ForegroundColor Yellow
    Write-Host "1. https://git-scm.com/download/win" -ForegroundColor Yellow
    Write-Host "2. ou execute: winget install --id Git.Git -e --source winget" -ForegroundColor Yellow
    Write-Host ""
    Read-Host "Pressione Enter para sair..."
    exit 1
}

# Verificar se estamos na pasta correta
$currentPath = Get-Location
Write-Host "üìÅ Pasta atual: $currentPath" -ForegroundColor Cyan

# Verificar se j√° √© um reposit√≥rio Git
if (Test-Path ".git") {
    Write-Host "üì¶ Reposit√≥rio Git j√° existe" -ForegroundColor Yellow
} else {
    Write-Host "üîß Inicializando reposit√≥rio Git..." -ForegroundColor Cyan
    git init
    Write-Host "‚úÖ Reposit√≥rio Git inicializado" -ForegroundColor Green
}

# Configurar usu√°rio se necess√°rio
$userName = git config user.name 2>$null
$userEmail = git config user.email 2>$null

if (-not $userName) {
    $inputName = Read-Host "Digite seu nome para o Git"
    git config user.name "$inputName"
    Write-Host "‚úÖ Nome configurado: $inputName" -ForegroundColor Green
}

if (-not $userEmail) {
    $inputEmail = Read-Host "Digite seu email para o Git"
    git config user.email "$inputEmail"
    Write-Host "‚úÖ Email configurado: $inputEmail" -ForegroundColor Green
}

# Verificar status
Write-Host ""
Write-Host "üìã Status dos arquivos:" -ForegroundColor Cyan
git status --porcelain

# Adicionar todos os arquivos
Write-Host ""
Write-Host "üìÅ Adicionando arquivos ao staging..." -ForegroundColor Cyan
git add .

# Mostrar arquivos que ser√£o commitados
Write-Host ""
Write-Host "üìù Arquivos que ser√£o commitados:" -ForegroundColor Cyan
git diff --cached --name-status

# Fazer commit
Write-Host ""
Write-Host "üíæ Fazendo commit..." -ForegroundColor Cyan

$commitMessage = @"
üöÄ Commit inicial: Formul√°rio de cadastro Convers√£o Digital

‚ú® Funcionalidades implementadas:
- Formul√°rio React com valida√ß√£o completa de CPF brasileiro
- Integra√ß√£o com Supabase para persist√™ncia de dados
- Interface moderna usando shadcn/ui e Tailwind CSS
- Download autom√°tico de CSV como backup
- Valida√ß√£o em tempo real de formul√°rios

üóÑÔ∏è Banco de dados Supabase:
- Schema SQL otimizado com Row Level Security (RLS)
- Valida√ß√£o autom√°tica de CPF no banco de dados
- √çndices para consultas r√°pidas por email, CPF e data
- Triggers para timestamps autom√°ticos
- Views para relat√≥rios e estat√≠sticas
- Pol√≠ticas de seguran√ßa (inser√ß√£o an√¥nima, leitura admin)

üåê Configura√ß√£o para deploy:
- Netlify.toml com configura√ß√µes otimizadas
- Headers de seguran√ßa implementados
- Cache configurado para assets est√°ticos
- Redirects SPA para React Router
- Vari√°veis de ambiente para Supabase
- Scripts de build e deploy automatizados

üõ°Ô∏è Seguran√ßa implementada:
- Row Level Security habilitado
- Valida√ß√£o de entrada sanitizada
- Headers de seguran√ßa (XSS, CSRF, etc.)
- Pol√≠ticas de cache seguras
- Valida√ß√£o de CPF server-side

üìä Recursos adicionais:
- Dados de teste para desenvolvimento
- Documenta√ß√£o completa de deploy
- Scripts utilit√°rios para verifica√ß√£o
- Configura√ß√£o Git e .gitignore otimizado

Pronto para deploy na Netlify! üéâ
"@

git commit -m "$commitMessage"

if ($LASTEXITCODE -eq 0) {
    Write-Host "‚úÖ Commit realizado com sucesso!" -ForegroundColor Green
} else {
    Write-Host "‚ùå Erro ao fazer commit" -ForegroundColor Red
    Read-Host "Pressione Enter para sair..."
    exit 1
}

# Configurar remote origin
Write-Host ""
Write-Host "üîó Configurando remote origin..." -ForegroundColor Cyan

# Remover origin existente se houver
git remote remove origin 2>$null

# Adicionar novo remote
git remote add origin https://github.com/ianjj2/formbravoconversao.git

if ($LASTEXITCODE -eq 0) {
    Write-Host "‚úÖ Remote origin configurado" -ForegroundColor Green
} else {
    Write-Host "‚ùå Erro ao configurar remote" -ForegroundColor Red
}

# Verificar remote
Write-Host ""
Write-Host "üîç Verificando remote configurado:" -ForegroundColor Cyan
git remote -v

# Fazer push
Write-Host ""
Write-Host "üì§ Fazendo push para GitHub..." -ForegroundColor Cyan
Write-Host "Isso pode solicitar suas credenciais do GitHub..." -ForegroundColor Yellow

git push -u origin main

if ($LASTEXITCODE -eq 0) {
    Write-Host ""
    Write-Host "üéâ SUCESSO! Projeto enviado para GitHub!" -ForegroundColor Green
    Write-Host ""
    Write-Host "üîó Seu reposit√≥rio: https://github.com/ianjj2/formbravoconversao" -ForegroundColor Cyan
    Write-Host ""
    Write-Host "üìã Pr√≥ximos passos:" -ForegroundColor Yellow
    Write-Host "1. Configure o Supabase executando o SQL em: supabase/migrations/complete_schema.sql" -ForegroundColor White
    Write-Host "2. Configure o Netlify conectando seu reposit√≥rio GitHub" -ForegroundColor White
    Write-Host "3. Adicione as vari√°veis de ambiente do Supabase no Netlify" -ForegroundColor White
    Write-Host "4. Teste o formul√°rio no ambiente de produ√ß√£o" -ForegroundColor White
    Write-Host ""
} else {
    Write-Host ""
    Write-Host "‚ùå Erro no push. Poss√≠veis solu√ß√µes:" -ForegroundColor Red
    Write-Host "1. Verifique suas credenciais do GitHub" -ForegroundColor Yellow
    Write-Host "2. Configure um Personal Access Token se necess√°rio" -ForegroundColor Yellow
    Write-Host "3. Tente usar GitHub Desktop como alternativa" -ForegroundColor Yellow
}

Write-Host ""
Read-Host "Pressione Enter para finalizar..."

